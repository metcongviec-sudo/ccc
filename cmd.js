const path = require("path");
const fs = require("fs");
const loaderCommand = require("../../core/loader/loaderCommand");

module.exports.config = {
    name: "command",
    aliases: ["cmd"],
    version: "1.2.0",
    role: 2,
    author: "NLam182",
    description: "Qu·∫£n l√Ω v√† ki·ªÉm so√°t c√°c plugin l·ªánh c·ªßa bot.",
    category: "H·ªá th·ªëng",
    usage: ".cmd <load|unload|loadall|unloadall|list|info> [t√™n l·ªánh]",
    cooldowns: 2
};

async function loadModule(api, event, moduleName) {
    const { threadId, type } = event;
    const commandPath = path.join(__dirname, `${moduleName}.js`);
    if (!fs.existsSync(commandPath)) {
        return api.sendMessage(`Kh√¥ng t√¨m th·∫•y plugin '${moduleName}'.`, threadId, type);
    }

    delete require.cache[require.resolve(commandPath)];
    const load = await loaderCommand(moduleName);

    if (load.status === false) {
        return api.sendMessage(`‚ùå L·ªói khi t·∫£i l·ªánh '${moduleName}': ${load.error}`, threadId, type);
    }

    if (load.restart) {
        await api.sendMessage(`üîÑ ƒê√£ c√†i ƒë·∫∑t th√™m package. Ti·∫øn h√†nh kh·ªüi ƒë·ªông l·∫°i bot ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi.`, threadId, type);
        return process.exit(2);
    }

    return api.sendMessage(`‚úÖ ƒê√£ t·∫£i l·ªánh '${moduleName}' th√†nh c√¥ng.`, threadId, type);

}

async function unloadModule(api, event, moduleName) {
    const { threadId, type } = event;
    if (!global.client.commands.has(moduleName)) {
        return api.sendMessage(`L·ªánh '${moduleName}' ch∆∞a ƒë∆∞·ª£c t·∫£i.`, threadId, type);
    }
    global.client.commands.delete(moduleName);
    const commandPath = path.join(__dirname, `${moduleName}.js`);
    delete require.cache[require.resolve(commandPath)];
    return api.sendMessage(`‚úÖ ƒê√£ g·ª° th√†nh c√¥ng l·ªánh '${moduleName}'.`, threadId, type);
}

module.exports.run = async function({ api, event, args }) {
    const { threadId, type } = event;

    if (!global.users.admin.includes(event.data.uidFrom)) {
        return api.sendMessage("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.", threadId, type);
    }

    const action = args[0]?.toLowerCase();
    const moduleName = args[1];

    switch (action) {
        case "load":
            if (!moduleName) return api.sendMessage("Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn t·∫£i.", threadId, type);
            await loadModule(api, event, moduleName);
            break;

        case "unload":
            if (!moduleName) return api.sendMessage("Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn g·ª°.", threadId, type);
            await unloadModule(api, event, moduleName);
            break;

        case "loadall":
            try {
                await api.sendMessage("üîÑ B·∫Øt ƒë·∫ßu t·∫£i l·∫°i t·∫•t c·∫£ l·ªánh...", threadId, type);
                Object.keys(require.cache).forEach(key => {
                    if (key.startsWith(__dirname)) delete require.cache[key];
                });
                global.client.commands.clear();
                const loaderCommand = require("../../core/loader/loaderCommand");
                await loaderCommand();
                await api.sendMessage(`‚úÖ ƒê√£ t·∫£i l·∫°i th√†nh c√¥ng ${global.client.commands.size} l·ªánh.`, threadId, type);
            } catch (error) {
                console.error("L·ªói khi loadall:", error);
                await api.sendMessage(`‚ùå L·ªói khi t·∫£i l·∫°i l·ªánh:\n${error.message}`, threadId, type);
            }
            break;

        case "unloadall":
            try {
                const files = fs.readdirSync(__dirname).filter(f => f.endsWith(".js") && f !== "cmd.js");
                let count = 0;
                for (const file of files) {
                    const name = file.replace(".js", "");
                    if (global.client.commands.has(name)) {
                        global.client.commands.delete(name);
                        delete require.cache[require.resolve(path.join(__dirname, file))];
                        count++;
                    }
                }
                await api.sendMessage(`‚úÖ ƒê√£ g·ª° ${count} l·ªánh th√†nh c√¥ng.`, threadId, type);
            } catch (error) {
                console.error("L·ªói khi g·ª°:", error);
                await api.sendMessage(`‚ùå L·ªói khi g·ª° l·ªánh:\n${error.message}`, threadId, type);
            }
            break;

        case "list":
            const list = Array.from(global.client.commands.keys());
            api.sendMessage(`üì¶ Hi·ªán c√≥ ${list.length} l·ªánh ƒëang ho·∫°t ƒë·ªông:\n${list.join(", ")}`, threadId, type);
            break;

        case "info":
            if (!moduleName) return api.sendMessage("Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn xem th√¥ng tin.", threadId, type);
            const cmd = global.client.commands.get(moduleName);
            if (!cmd) return api.sendMessage(`L·ªánh '${moduleName}' ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c kh√¥ng t·ªìn t·∫°i.`, threadId, type);
            const config = cmd.config;
            const roleText = config.role === 0 ? "Ng∆∞·ªùi d√πng" : config.role === 1 ? "Support" : "Admin";
            const depsText = config.dependencies ? Object.keys(config.dependencies).join(", ") : "Kh√¥ng c√≥";

            const msg = `üîé Th√¥ng tin l·ªánh: ${config.name}\n\n` +
                        `- M√¥ t·∫£: ${config.description}\n` +
                        `- T√°c gi·∫£: ${config.author}\n` +
                        `- Phi√™n b·∫£n: ${config.version}\n` +
                        `- Quy·ªÅn h·∫°n: ${roleText}\n` +
                        `- C√°ch d√πng: ${config.usage}\n` +
                        `- Dependencies: ${depsText}`;
            api.sendMessage(msg, threadId, type);
            break;

        default:
            api.sendMessage(
                "üìö Qu·∫£n l√Ω module bot\n\n" +
                "cmd load <l·ªánh> - T·∫£i m·ªôt l·ªánh\n" +
                "cmd unload <l·ªánh> - G·ª° m·ªôt l·ªánh\n" +
                "cmd loadall - T·∫£i l·∫°i t·∫•t c·∫£ l·ªánh\n" +
                "cmd unloadall - G·ª° t·∫•t c·∫£ l·ªánh\n" +
                "cmd list - Li·ªát k√™ c√°c l·ªánh\n" +
                "cmd info <l·ªánh> - Xem th√¥ng tin l·ªánh",
                threadId, type
            );
            break;
    }
};
