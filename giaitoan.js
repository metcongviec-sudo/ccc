const axios = require('axios');

module.exports.config = {
  name: 'giaitoan',
  aliases: ['math', 'gi·∫£i to√°n', 'giaitoan'],
  version: '1.0.0',
  role: 0,
  author: 'Cascade',
  description: 'Gi·∫£i to√°n b·∫±ng Gemini qua API zeidteam (chatgpt4 endpoint)',
  category: 'Ti·ªán √≠ch',
  usage: 'bonz gi·∫£i to√°n <bi·ªÉu_th·ª©c/to√°n_h·ªçc_m√¥_t·∫£>',
  cooldowns: 2
};

module.exports.run = async ({ api, event, args }) => {
  const { threadId, type } = event;
  try {
    const senderId = event?.data?.uidFrom || event?.authorId;
    let userName = 'Ng∆∞·ªùi d√πng';
    try {
      const info = await api.getUserInfo(senderId);
      userName = info?.changed_profiles?.[senderId]?.displayName || 'Ng∆∞·ªùi d√πng';
    } catch {}

    const prompt = (args || []).join(' ').trim();
    if (!prompt) {
      return api.sendMessage([
        'B·∫£ng th√¥ng tin d·ªãch v·ª•',
        `ng d√πng: ${userName}`,
        'd·ªãch v·ª• : bonz gi·∫£i to√°n',
        `id ng d√πng: ${senderId}`,
        'c·∫•p b·∫≠c: Th√†nh vi√™n',
        's·ªë l∆∞·ª£t d√πng: 1',
        'th√¥ng b√°o: Thi·∫øu ƒë·ªÅ b√†i/bi·ªÉu th·ª©c',
        'c√°ch d√πng: bonz gi·∫£i to√°n 2+2*3 ho·∫∑c bonz giaitoan ƒë·∫°o h√†m c·ªßa x^2'
      ].join('\n'), threadId, type);
    }

    const cfg = global?.config || {};
    const geminiKey = cfg?.gemini_key || process.env.GEMINI_API_KEY || cfg?.zeid_api_key || '';

    const baseUrl = 'https://api.zeidteam.xyz/ai/chatgpt4';
    const url = `${baseUrl}?prompt=${encodeURIComponent(prompt)}`;

    const headers = {};
    if (geminiKey) {
      headers['apikey'] = geminiKey;           // kh·∫£ nƒÉng 1
      headers['Authorization'] = `Bearer ${geminiKey}`; // kh·∫£ nƒÉng 2
    }

    let resp;
    try {
      resp = await axios.get(url, { headers, timeout: 20000 });
    } catch (e) {
      // fallback: th·ª≠ truy·ªÅn key qua query
      if (geminiKey) {
        const alt = `${baseUrl}?prompt=${encodeURIComponent(prompt)}&apikey=${encodeURIComponent(geminiKey)}`;
        resp = await axios.get(alt, { timeout: 20000 });
      } else {
        throw e;
      }
    }

    const data = resp?.data;
    let answer = data?.response || data?.result || data?.answer || '';
    // N·∫øu API kh√¥ng tr·∫£ k·∫øt qu·∫£ h·ª£p l·ªá ho·∫∑c c√≥ th√¥ng b√°o l·ªói, th·ª≠ t√≠nh c·ª•c b·ªô
    const apiText = String(answer || JSON.stringify(data || {}));

    function localCalc(expr) {
      try {
        let s = String(expr || '').trim();
        if (!/^[0-9+\-*/().,^\sA-Za-z]+$/.test(s)) return null; // ch·∫∑n k√Ω t·ª± l·∫°
        // thay ^ b·∫±ng **
        s = s.replace(/\^/g, '**');
        // thay th·∫ø h·∫±ng s·ªë
        s = s.replace(/\bpi\b/gi, 'Math.PI').replace(/\be\b/g, 'Math.E');
        // h√†m to√°n
        const funcs = ['sin','cos','tan','asin','acos','atan','log','sqrt','abs','ceil','floor','round','exp','pow','min','max'];
        for (const f of funcs) {
          const rx = new RegExp(`\\b${f}\\s*\\(`, 'gi');
          s = s.replace(rx, `Math.${f}(`);
        }
        // ch·∫•p nh·∫≠n ch·ªâ c√°c ch·ªØ c√°i thu·ªôc danh s√°ch cho ph√©p
        const letters = s.match(/[A-Za-z_]+/g) || [];
        for (const w of letters) {
          if (!/^Math\.(PI|E|sin|cos|tan|asin|acos|atan|log|sqrt|abs|ceil|floor|round|exp|pow|min|max)$/.test(w)) {
            return null;
          }
        }
        // eval an to√†n t∆∞∆°ng ƒë·ªëi
        // eslint-disable-next-line no-new-func
        const result = Function(`"use strict"; return (${s});`)();
        if (typeof result === 'number' && isFinite(result)) return result;
        return null;
      } catch { return null; }
    }

    if (!answer || /not defined|error|exception|invalid/i.test(apiText)) {
      const local = localCalc(prompt);
      if (local !== null) {
        answer = String(local);
      }
    }
    if (!answer) {
      answer = 'Kh√¥ng c√≥ k·∫øt qu·∫£ kh·∫£ d·ª•ng t·ª´ API.';
    }

    const header = [
      'B·∫£ng th√¥ng tin d·ªãch v·ª•',
      `ng d√πng: ${userName}`,
      'd·ªãch v·ª• : bonz gi·∫£i to√°n',
      `id ng d√πng: ${senderId}`,
      'c·∫•p b·∫≠c: Th√†nh vi√™n',
      's·ªë l∆∞·ª£t d√πng: 1',
      'th√¥ng b√°o: Th√†nh c√¥ng'
    ].join('\n');

    const details = ['','üßÆ ƒê·ªÅ b√†i: ', prompt, '', '‚úÖ K·∫øt qu·∫£:', String(answer)].join('\n');
    return api.sendMessage(`${header}\n${details}`, threadId, type, null, senderId);
  } catch (e) {
    return api.sendMessage('‚ùå Kh√¥ng th·ªÉ gi·∫£i to√°n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.', event.threadId, event.type);
  }
};
