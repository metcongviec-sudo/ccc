const fs = require('fs').promises;
const path = require('path');

// ƒê∆∞·ªùng d·∫´n file c·∫•u h√¨nh
const OT_FILE = path.join(__dirname, '..', '..', 'assets', 'ot.txt');
const STICKER_FILE = path.join(__dirname, '..', '..', 'assets', 'sticker.json');

/**
 * Join group t·ª´ link Zalo
 */
async function joinGroup(api, groupUrl) {
    try {
        if (!groupUrl.startsWith('https://zalo.me/')) {
            return { success: false, message: 'Link kh√¥ng h·ª£p l·ªá! Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng https://zalo.me/' };
        }

        // Tr√≠ch xu·∫•t group ID t·ª´ URL
        const groupIdMatch = groupUrl.match(/https:\/\/zalo\.me\/g\/([a-zA-Z0-9]+)/);
        if (!groupIdMatch) {
            return { success: false, message: 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t Group ID t·ª´ link' };
        }
        
        const groupId = groupIdMatch[1];
        
        try {
            // Th·ª≠ l·∫•y th√¥ng tin group tr∆∞·ªõc
            const groupInfo = await api.getThreadInfo(groupId);
            if (groupInfo && groupInfo.threadID) {
                return { 
                    success: true, 
                    groupId: groupInfo.threadID, 
                    message: 'ƒê√£ c√≥ trong group',
                    groupInfo: groupInfo
                };
            }
        } catch (_) {
            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c info, c√≥ th·ªÉ ch∆∞a join
        }
        
        // Th·ª≠ join group b·∫±ng c√°ch g·ª≠i tin nh·∫Øn v√†o group ID
        try {
            await api.sendMessage('', groupId, 'GROUP');
            return { 
                success: true, 
                groupId: groupId, 
                message: 'Join group th√†nh c√¥ng'
            };
        } catch (joinError) {
            return { success: false, message: 'Kh√¥ng th·ªÉ tham gia nh√≥m' };
        }
        
    } catch (error) {
        console.error('L·ªói join group:', error);
        return { success: false, message: `L·ªói: ${error.message}` };
    }
}

/**
 * L·∫•y danh s√°ch tin nh·∫Øn t·ª´ file ot.txt
 */
async function getRandomMessage() {
    try {
        const content = await fs.readFile(OT_FILE, 'utf-8');
        const messages = content.split('\n').filter(line => line.trim());
        
        if (messages.length === 0) {
            return 'Xin ch√†o m·ªçi ng∆∞·ªùi! üëã';
        }
        
        return messages[Math.floor(Math.random() * messages.length)];
    } catch (error) {
        console.log('Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file ot.txt, d√πng tin nh·∫Øn m·∫∑c ƒë·ªãnh');
        return 'Xin ch√†o m·ªçi ng∆∞·ªùi! üëã';
    }
}

/**
 * L·∫•y sticker ng·∫´u nhi√™n t·ª´ file sticker.json
 */
async function getRandomSticker() {
    try {
        const content = await fs.readFile(STICKER_FILE, 'utf-8');
        const stickers = JSON.parse(content);
        
        if (!Array.isArray(stickers) || stickers.length === 0) {
            return null;
        }
        
        return stickers[Math.floor(Math.random() * stickers.length)];
    } catch (error) {
        console.log('Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file sticker.json');
        return null;
    }
}

/**
 * L·∫•y danh s√°ch th√†nh vi√™n nh√≥m ƒë·ªÉ t·∫°o mentions
 */
async function getGroupMembers(api, groupId) {
    try {
        const groupInfo = await api.getThreadInfo(groupId);
        
        if (!groupInfo || !groupInfo.participantIDs) {
            return [];
        }
        
        return groupInfo.participantIDs;
    } catch (error) {
        console.error('L·ªói l·∫•y danh s√°ch th√†nh vi√™n:', error);
        return [];
    }
}

/**
 * G·ª≠i tin nh·∫Øn v·ªõi mentions t·∫•t c·∫£ th√†nh vi√™n
 */
async function sendMessageWithMentions(api, groupId, message, memberIds) {
    try {
        if (!memberIds || memberIds.length === 0) {
            // G·ª≠i tin nh·∫Øn th∆∞·ªùng n·∫øu kh√¥ng c√≥ members
            await api.sendMessage(message, groupId, 'GROUP');
            return true;
        }
        
        // G·ª≠i tin nh·∫Øn ƒë∆°n gi·∫£n v·ªõi @all ho·∫∑c ch·ªâ tin nh·∫Øn th∆∞·ªùng
        const finalMessage = message + '\n@all';
        await api.sendMessage(finalMessage, groupId, 'GROUP');
        
        return true;
    } catch (error) {
        console.error('L·ªói g·ª≠i tin nh·∫Øn:', error);
        // Fallback: g·ª≠i tin nh·∫Øn th∆∞·ªùng
        try {
            await api.sendMessage(message, groupId, 'GROUP');
            return true;
        } catch (_) {
            return false;
        }
    }
}

/**
 * G·ª≠i sticker
 */
async function sendSticker(api, groupId, sticker) {
    try {
        if (!sticker) return false;
        
        // S·ª≠ d·ª•ng API sendSticker c·ªßa ZCA-JS
        await api.sendSticker(
            sticker.stickerType,
            sticker.stickerId, 
            sticker.cateId,
            groupId,
            'GROUP'
        );
        
        return true;
    } catch (error) {
        console.error('L·ªói g·ª≠i sticker:', error);
        return false;
    }
}

/**
 * Spam tin nh·∫Øn v√† sticker v√†o group
 */
async function spamGroup(api, groupId, spamCount, progressCallback) {
    try {
        const members = await getGroupMembers(api, groupId);
        let successCount = 0;
        
        for (let i = 0; i < spamCount; i++) {
            try {
                // G·ª≠i tin nh·∫Øn v·ªõi mentions
                const message = await getRandomMessage();
                const messageSent = await sendMessageWithMentions(api, groupId, message, members);
                
                if (messageSent) {
                    // G·ª≠i sticker
                    const sticker = await getRandomSticker();
                    await sendSticker(api, groupId, sticker);
                    
                    successCount++;
                }
                
                // Callback ƒë·ªÉ b√°o ti·∫øn ƒë·ªô
                if (progressCallback) {
                    progressCallback(i + 1, spamCount, successCount);
                }
                
                // Delay ƒë·ªÉ tr√°nh spam qu√° nhanh
                await new Promise(resolve => setTimeout(resolve, 200));
                
            } catch (error) {
                console.error(`L·ªói spam l·∫ßn ${i + 1}:`, error);
                // Ti·∫øp t·ª•c v·ªõi l·∫ßn ti·∫øp theo
            }
        }
        
        return { success: true, successCount, totalCount: spamCount };
    } catch (error) {
        console.error('L·ªói spam group:', error);
        return { success: false, message: error.message };
    }
}

module.exports = {
    joinGroup,
    spamGroup,
    getRandomMessage,
    getRandomSticker,
    getGroupMembers
};

// Th√™m metadata ƒë·ªÉ tr√°nh b√°o "kh√¥ng h·ª£p l·ªá" khi loader qu√©t commands
module.exports.config = {
  name: '_group_manager_helper',
  aliases: [],
  version: '1.0.0',
  role: 2,
  author: 'Cascade',
  description: 'Helper qu·∫£n l√Ω nh√≥m (kh√¥ng ph·∫£i l·ªánh cho ng∆∞·ªùi d√πng).',
  category: 'H·ªá th·ªëng',
  usage: '',
  cooldowns: 0,
  dependencies: {}
};

// No-op run ƒë·ªÉ t∆∞∆°ng th√≠ch giao di·ªán l·ªánh
module.exports.run = async () => { return; };
